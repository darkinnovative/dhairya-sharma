import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { FaCalendar, FaClock, FaArrowRight, FaSearch, FaTimes, FaExternalLinkAlt, FaBookOpen, FaCode, FaLightbulb, FaRocket } from 'react-icons/fa';

interface BlogPost {
  id: number;
  title: string;
  excerpt: string;
  content: string;
  category: 'Frontend' | 'Backend' | 'Product' | 'Design' | 'DevOps';
  tags: string[];
  readTime: string;
  publishDate: string;
  image: string;
  featured: boolean;
  keyMetrics: {
    label: string;
    value: string;
  }[];
  link?: string;
}

const Blog: React.FC = () => {
  const [selectedCategory, setSelectedCategory] = useState<string>('All');
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [selectedPost, setSelectedPost] = useState<BlogPost | null>(null);

  const blogPosts: BlogPost[] = [
    {
      id: 1,
      title: "Building Scalable React Applications with TypeScript",
      excerpt: "Learn best practices for structuring large-scale React applications with TypeScript, including advanced patterns and performance optimization techniques.",
      content: `
        <h3>Introduction</h3>
        <p>Building scalable React applications requires careful consideration of architecture, TypeScript implementation, and performance optimization. In this comprehensive guide, we'll explore proven patterns and practices.</p>
        
        <h3>Key Concepts Covered</h3>
        <ul>
          <li>Advanced TypeScript patterns for React components</li>
          <li>State management with Redux Toolkit and TypeScript</li>
          <li>Performance optimization techniques</li>
          <li>Code splitting and lazy loading strategies</li>
          <li>Testing strategies for TypeScript React apps</li>
        </ul>
        
        <h3>Architecture Patterns</h3>
        <p>We'll dive deep into folder structure, component composition, and how to leverage TypeScript's type system to catch errors at compile time rather than runtime.</p>
        
        <h3>Performance Optimization</h3>
        <p>Learn about React.memo, useMemo, useCallback, and other optimization techniques that work seamlessly with TypeScript.</p>
      `,
      category: "Frontend",
      tags: ["React", "TypeScript", "Performance", "Architecture"],
      readTime: "8 min read",
      publishDate: "2024-01-15",
      image: "react-typescript",
      featured: true,
      keyMetrics: [
        { label: "Views", value: "12.5K" },
        { label: "Shares", value: "450" },
        { label: "Comments", value: "89" },
        { label: "Rating", value: "4.8/5" }
      ]
    },
    {
      id: 2,
      title: "Microservices Architecture: Lessons from Production",
      excerpt: "Real-world experiences and lessons learned from implementing microservices architecture in production environments.",
      content: `
        <h3>Why Microservices?</h3>
        <p>Microservices architecture has become increasingly popular for building scalable, maintainable applications. However, the transition from monolith to microservices comes with its own set of challenges.</p>
        
        <h3>Production Lessons</h3>
        <ul>
          <li>Service decomposition strategies</li>
          <li>Inter-service communication patterns</li>
          <li>Data consistency and distributed transactions</li>
          <li>Monitoring and observability</li>
          <li>Deployment and DevOps considerations</li>
        </ul>
        
        <h3>Common Pitfalls</h3>
        <p>Learn about the mistakes we made and how to avoid them in your microservices journey.</p>
        
        <h3>Best Practices</h3>
        <p>Discover proven patterns for building resilient, scalable microservices that can handle production workloads.</p>
      `,
      category: "Backend",
      tags: ["Microservices", "Node.js", "Docker", "System Design"],
      readTime: "12 min read",
      publishDate: "2024-01-10",
      image: "microservices",
      featured: true,
      keyMetrics: [
        { label: "Views", value: "18.2K" },
        { label: "Shares", value: "680" },
        { label: "Comments", value: "127" },
        { label: "Rating", value: "4.9/5" }
      ]
    },
    {
      id: 3,
      title: "The Art of Product Thinking in Tech",
      excerpt: "How to develop a product mindset as a developer and make decisions that drive user value and business impact.",
      content: "Full article content would go here...",
      category: "Product",
      tags: ["Product Management", "UX", "Strategy", "Leadership"],
      readTime: "6 min read",
      publishDate: "2024-01-05",
      image: "product-thinking",
      featured: false,
      keyMetrics: [
        { label: "Views", value: "8.7K" },
        { label: "Shares", value: "290" },
        { label: "Comments", value: "54" },
        { label: "Rating", value: "4.6/5" }
      ]
    },
    {
      id: 4,
      title: "Advanced CSS Techniques for Modern Web Design",
      excerpt: "Explore cutting-edge CSS features and techniques that will elevate your web design skills and create stunning user interfaces.",
      content: "Full article content would go here...",
      category: "Frontend",
      tags: ["CSS", "Design", "Animation", "Layout"],
      readTime: "10 min read",
      publishDate: "2023-12-28",
      image: "advanced-css",
      featured: false,
      keyMetrics: [
        { label: "Views", value: "15.3K" },
        { label: "Shares", value: "520" },
        { label: "Comments", value: "78" },
        { label: "Rating", value: "4.7/5" }
      ]
    },
    {
      id: 5,
      title: "Database Design Patterns for High-Performance Applications",
      excerpt: "Learn about database design patterns, indexing strategies, and optimization techniques for building high-performance applications.",
      content: "Full article content would go here...",
      category: "Backend",
      tags: ["Database", "PostgreSQL", "Performance", "Optimization"],
      readTime: "15 min read",
      publishDate: "2023-12-20",
      image: "database-design",
      featured: false,
      keyMetrics: [
        { label: "Views", value: "11.8K" },
        { label: "Shares", value: "410" },
        { label: "Comments", value: "92" },
        { label: "Rating", value: "4.8/5" }
      ]
    },
    {
      id: 6,
      title: "User-Centered Design: From Research to Implementation",
      excerpt: "A comprehensive guide to user-centered design process, from conducting user research to implementing design solutions.",
      content: "Full article content would go here...",
      category: "Design",
      tags: ["UX Research", "Design Process", "User Testing", "Prototyping"],
      readTime: "9 min read",
      publishDate: "2023-12-15",
      image: "user-centered-design",
      featured: false,
      keyMetrics: [
        { label: "Views", value: "9.6K" },
        { label: "Shares", value: "340" },
        { label: "Comments", value: "65" },
        { label: "Rating", value: "4.5/5" }
      ]
    }
  ];

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'Frontend': return <FaCode />;
      case 'Backend': return <FaRocket />;
      case 'Product': return <FaLightbulb />;
      case 'Design': return <FaBookOpen />;
      case 'DevOps': return <FaRocket />;
      default: return <FaBookOpen />;
    }
  };

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'Frontend': return 'bg-gradient-to-r from-blue-500/20 to-cyan-500/20 text-blue-300 border border-blue-500/30';
      case 'Backend': return 'bg-gradient-to-r from-green-500/20 to-emerald-500/20 text-green-300 border border-green-500/30';
      case 'Product': return 'bg-gradient-to-r from-purple-500/20 to-pink-500/20 text-purple-300 border border-purple-500/30';
      case 'Design': return 'bg-gradient-to-r from-orange-500/20 to-red-500/20 text-orange-300 border border-orange-500/30';
      case 'DevOps': return 'bg-gradient-to-r from-gray-500/20 to-slate-500/20 text-gray-300 border border-gray-500/30';
      default: return 'bg-gradient-to-r from-cyan-500/20 to-blue-500/20 text-cyan-300 border border-cyan-500/30';
    }
  };

  const categories = ['All', 'Frontend', 'Backend', 'Product', 'Design'];

  const filteredPosts = blogPosts.filter(post => {
    const matchesCategory = selectedCategory === 'All' || post.category === selectedCategory;
    const matchesSearch = post.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         post.excerpt.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         post.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()));
    return matchesCategory && matchesSearch;
  });

  const featuredPosts = blogPosts.filter(post => post.featured);
  const regularPosts = filteredPosts.filter(post => !post.featured);

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  // Blog Post Modal Component
  const BlogPostModal = () => {
    return (
      <AnimatePresence>
        {selectedPost && (
          <motion.div
            className="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-6"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={() => setSelectedPost(null)}
          >
            <motion.div
              className="bg-gradient-to-br from-gray-900/95 via-black/90 to-gray-900/95 backdrop-blur-xl rounded-3xl shadow-2xl shadow-cyan-500/20 w-full h-full max-w-7xl max-h-[95vh] overflow-y-auto border border-cyan-500/30"
              initial={{ scale: 0.8, opacity: 0, y: 50 }}
              animate={{ scale: 1, opacity: 1, y: 0 }}
              exit={{ scale: 0.8, opacity: 0, y: 50 }}
              transition={{ type: "spring", stiffness: 300, damping: 30 }}
              onClick={(e) => e.stopPropagation()}
            >
            {/* Header */}
            <div className="relative p-12 pb-8">
              <button
                onClick={() => setSelectedPost(null)}
                className="absolute top-8 right-8 text-gray-400 hover:text-white transition-colors duration-200 p-3 rounded-full hover:bg-gray-800/50"
              >
                <FaTimes size={24} />
              </button>
              
              <div className="flex items-center gap-4 mb-6">
                <span className={`px-6 py-3 rounded-full text-lg font-medium font-mono ${getCategoryColor(selectedPost.category)}`}>
                  {selectedPost.category}
                </span>
                {selectedPost.featured && (
                  <span className="bg-gradient-to-r from-red-500/20 to-pink-500/20 text-red-300 border border-red-500/30 px-4 py-2 rounded-full text-lg font-medium font-mono">
                    Featured
                  </span>
                )}
              </div>

              <h2 className="text-5xl md:text-6xl font-bold text-white mb-6 font-mono leading-tight">
                {selectedPost.title}
              </h2>
              
              <p className="text-gray-300 text-xl leading-relaxed font-mono mb-6 max-w-4xl">
                {selectedPost.excerpt}
              </p>

              <div className="flex items-center gap-8 text-lg text-gray-400">
                <span className="flex items-center gap-3 font-mono">
                  <FaCalendar className="text-cyan-400" size={20} />
                  {formatDate(selectedPost.publishDate)}
                </span>
                <span className="flex items-center gap-3 font-mono">
                  <FaClock className="text-cyan-400" size={20} />
                  {selectedPost.readTime}
                </span>
              </div>
            </div>

            {/* Content */}
            <div className="px-12 pb-12">
              {/* Tags */}
              <div className="mb-12">
                <h3 className="text-2xl font-bold text-white mb-6 font-mono">Tags</h3>
                <div className="flex flex-wrap gap-4">
                  {selectedPost.tags.map((tag, index) => (
                    <motion.span
                      key={index}
                      className="px-6 py-3 bg-gradient-to-r from-cyan-500/20 to-blue-500/20 text-cyan-300 border border-cyan-500/30 rounded-lg font-medium font-mono text-lg"
                      initial={{ opacity: 0, scale: 0.8 }}
                      animate={{ opacity: 1, scale: 1 }}
                      transition={{ delay: index * 0.05 }}
                    >
                      #{tag}
                    </motion.span>
                  ))}
                </div>
              </div>

              {/* Article Content */}
              <div className="mb-12">
                <h3 className="text-2xl font-bold text-white mb-6 font-mono">Article Content</h3>
                <div className="bg-gradient-to-br from-gray-900/60 to-black/60 backdrop-blur-xl p-10 rounded-xl border border-cyan-500/20">
                  <div 
                    className="prose prose-invert prose-cyan prose-lg max-w-none font-mono text-gray-300 leading-relaxed"
                    dangerouslySetInnerHTML={{ __html: selectedPost.content }}
                    style={{
                      fontSize: '1.125rem',
                      lineHeight: '1.75'
                    }}
                  />
                </div>
              </div>

              {/* Action Buttons */}
              <div className="flex flex-col sm:flex-row gap-6">
                <motion.button
                  onClick={() => {
                    // Here you could add functionality to share or bookmark
                    navigator.clipboard.writeText(window.location.href);
                  }}
                  className="flex-1 inline-flex items-center justify-center gap-4 bg-gradient-to-r from-cyan-500 to-blue-500 text-white px-8 py-5 rounded-xl font-semibold hover:from-cyan-600 hover:to-blue-600 transition-all duration-300 shadow-lg shadow-cyan-500/30 font-mono text-lg"
                  whileHover={{ scale: 1.02, y: -2 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <FaExternalLinkAlt size={20} />
                  Share Article
                </motion.button>
                <motion.button
                  onClick={() => setSelectedPost(null)}
                  className="px-8 py-5 bg-gradient-to-r from-gray-700 to-gray-800 text-white rounded-xl font-semibold hover:from-gray-600 hover:to-gray-700 transition-all duration-300 font-mono text-lg"
                  whileHover={{ scale: 1.02, y: -2 }}
                  whileTap={{ scale: 0.98 }}
                >
                  Close
                </motion.button>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    );
  };

  const renderBlogCard = (post: BlogPost, index: number) => (
    <motion.div
      key={post.id}
      className="bg-gradient-to-r from-gray-900/80 via-black/60 to-gray-900/80 backdrop-blur-xl rounded-2xl shadow-2xl shadow-cyan-500/10 overflow-hidden border border-cyan-500/20 hover:border-cyan-400/40 hover:shadow-cyan-500/20 transition-all duration-500"
      initial={{ opacity: 0, y: 50 }}
      whileInView={{ opacity: 1, y: 0 }}
      transition={{ 
        duration: 0.8, 
        delay: index * 0.2,
        ease: "easeOut"
      }}
      viewport={{ once: true }}
      whileHover={{ 
        y: -8, 
        scale: 1.02,
        transition: { duration: 0.4, ease: "easeInOut" }
      }}
    >
      <div className="p-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-6">
          <span className={`px-4 py-2 rounded-full text-sm font-semibold flex items-center gap-2 font-mono ${getCategoryColor(post.category)}`}>
            {getCategoryIcon(post.category)}
            {post.category}
          </span>
          <div className="text-gray-400 text-sm font-mono">{post.readTime}</div>
        </div>

        {/* Title and Description */}
        <h3 className="text-2xl font-bold text-white mb-4 font-mono hover:text-cyan-400 transition-colors">
          {post.title}
        </h3>
        
        <p className="text-gray-300 mb-6 leading-relaxed font-mono text-sm">
          {post.excerpt}
        </p>

        {/* Key Metrics Grid */}
        <div className="grid grid-cols-2 gap-3 mb-6">
          {post.keyMetrics.slice(0, 4).map((metric, metricIndex) => (
            <motion.div
              key={metricIndex}
              className="bg-gradient-to-br from-gray-900/60 to-black/60 backdrop-blur-xl p-3 rounded-lg border border-cyan-500/20 text-center"
              initial={{ opacity: 0, scale: 0.8 }}
              whileInView={{ opacity: 1, scale: 1 }}
              transition={{ 
                duration: 0.5, 
                delay: 0.3 + metricIndex * 0.1,
                type: "spring",
                stiffness: 150
              }}
              viewport={{ once: true }}
            >
              <div className="text-lg font-bold text-transparent bg-gradient-to-r from-cyan-400 to-blue-400 bg-clip-text font-mono">{metric.value}</div>
              <div className="text-xs text-gray-400 font-mono">{metric.label}</div>
            </motion.div>
          ))}
        </div>

        {/* Tags */}
        <div className="flex flex-wrap gap-2 mb-6">
          {post.tags.slice(0, 6).map((tag, tagIndex) => (
            <span
              key={tagIndex}
              className="px-2 py-1 bg-gradient-to-r from-cyan-500/20 to-blue-500/20 text-cyan-300 border border-cyan-500/30 rounded text-xs font-medium font-mono"
            >
              #{tag}
            </span>
          ))}
        </div>

        {/* Footer */}
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2 text-gray-400 text-sm font-mono">
            <FaCalendar className="text-cyan-400" />
            {formatDate(post.publishDate)}
          </div>
          <motion.button
            onClick={() => setSelectedPost(post)}
            className="inline-flex items-center gap-2 bg-gradient-to-r from-cyan-500/80 to-blue-500/80 hover:from-cyan-500 hover:to-blue-500 text-white px-4 py-2 rounded-lg font-medium transition-all duration-300 shadow-lg shadow-cyan-500/20 font-mono text-sm"
            whileHover={{ scale: 1.05, x: 4 }}
            whileTap={{ scale: 0.95 }}
          >
            Read More
            <FaArrowRight className="text-xs" />
          </motion.button>
        </div>
      </div>
    </motion.div>
  );

  return (
    <>
      <BlogPostModal />
      <section id="blog" className="py-20 bg-gradient-to-br from-gray-900 via-slate-900 to-black dark:from-black dark:via-gray-900 dark:to-slate-900 relative">
      {/* Tech Pattern Background */}
      <div className="absolute inset-0 opacity-5">
        <div className="absolute inset-0" style={{
          backgroundImage: `radial-gradient(circle at 2px 2px, rgba(0, 255, 255, 0.3) 1px, transparent 0)`,
          backgroundSize: '40px 40px'
        }}></div>
      </div>
      
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
        <motion.div
          initial={{ opacity: 0, y: 50 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
          viewport={{ once: true }}
        >
          <motion.h2 
            className="text-4xl md:text-5xl font-bold text-center text-white mb-4 relative font-mono"
            initial={{ opacity: 0, y: -20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
            viewport={{ once: true }}
          >
            <span className="text-cyan-400">//</span> Blog & Insights <span className="text-cyan-400">&lt;/&gt;</span>
          </motion.h2>
          
          <motion.p 
            className="text-center text-gray-300 mb-12 max-w-2xl mx-auto font-mono"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.2 }}
            viewport={{ once: true }}
          >
            Sharing thoughts on development, design, and building products that matter.
          </motion.p>

          {/* Search and Filter */}
          <div className="flex flex-col md:flex-row gap-4 mb-12">
            <div className="relative flex-1">
              <FaSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
              <input
                type="text"
                placeholder="Search articles..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-3 border border-cyan-500/30 bg-gradient-to-r from-gray-900/80 via-black/60 to-gray-900/80 backdrop-blur-xl text-white rounded-lg focus:ring-2 focus:ring-cyan-500 focus:border-cyan-400 outline-none font-mono placeholder-gray-400"
              />
            </div>
            <div className="flex gap-2 overflow-x-auto">
              {categories.map((category) => (
                <button
                  key={category}
                  onClick={() => setSelectedCategory(category)}
                  className={`px-4 py-2 rounded-lg font-medium whitespace-nowrap transition-all duration-300 font-mono ${
                    selectedCategory === category
                      ? 'bg-gradient-to-r from-cyan-500 to-blue-500 text-white shadow-lg shadow-cyan-500/30'
                      : 'bg-gradient-to-r from-gray-900/80 via-black/60 to-gray-900/80 backdrop-blur-xl text-gray-300 hover:text-white border border-cyan-500/20 hover:border-cyan-400/40'
                  }`}
                >
                  {category}
                </button>
              ))}
            </div>
          </div>

          {/* Featured Posts */}
          {selectedCategory === 'All' && searchTerm === '' && (
            <div className="mb-16">
              <h3 className="text-2xl font-bold text-white mb-8 font-mono">// Featured Articles</h3>
              <div className="grid md:grid-cols-2 gap-8">
                {featuredPosts.map((post, index) => renderBlogCard(post, index))}
              </div>
            </div>
          )}

          {/* Regular Posts */}
          <div>
            {selectedCategory !== 'All' || searchTerm !== '' ? (
              <h3 className="text-2xl font-bold text-white mb-8 font-mono">
                // {searchTerm ? `Search Results (${filteredPosts.length})` : `${selectedCategory} Articles`}
              </h3>
            ) : (
              <h3 className="text-2xl font-bold text-white mb-8 font-mono">// Latest Articles</h3>
            )}
            
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
              {(selectedCategory === 'All' && searchTerm === '' ? regularPosts : filteredPosts).map((post, index) => renderBlogCard(post, index))}
            </div>

            {filteredPosts.length === 0 && (
              <div className="text-center py-12">
                <p className="text-gray-400 text-lg font-mono">No articles found matching your criteria.</p>
              </div>
            )}
          </div>          {/* Regular Posts */}
          <div>
            {selectedCategory !== 'All' || searchTerm !== '' ? (
              <h3 className="text-2xl font-bold text-white mb-8 font-mono">
                {searchTerm ? `Search Results (${filteredPosts.length})` : `${selectedCategory} Articles`}
              </h3>
            ) : (
              <h3 className="text-2xl font-bold text-white mb-8 font-mono">Latest Articles</h3>
            )}
            
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
              {(selectedCategory === 'All' && searchTerm === '' ? regularPosts : filteredPosts).map((post, index) => (
                <motion.article
                  key={post.id}
                  className="bg-gradient-to-r from-gray-900/80 via-black/60 to-gray-900/80 backdrop-blur-xl rounded-2xl shadow-2xl shadow-cyan-500/10 overflow-hidden border border-cyan-500/20 hover:border-cyan-400/40 hover:shadow-cyan-500/20 transition-all duration-500 group"
                  initial={{ opacity: 0, y: 30 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.6, delay: index * 0.1 }}
                  viewport={{ once: true }}
                  whileHover={{ y: -8, scale: 1.02 }}
                >
                  <div className="h-40 bg-gradient-to-br from-gray-700 to-gray-900 flex items-center justify-center text-white font-semibold font-mono relative overflow-hidden">
                    <div className="absolute inset-0 bg-black/20"></div>
                    <span className="relative z-10">{post.image}</span>
                  </div>
                  <div className="p-6">
                    <div className="flex items-center gap-3 mb-3">
                      <span className={`px-3 py-1 rounded-full text-sm font-medium font-mono ${getCategoryColor(post.category)}`}>
                        {post.category}
                      </span>
                    </div>
                    <h3 className="text-lg font-bold text-white mb-3 group-hover:text-cyan-400 transition-colors line-clamp-2 font-mono">
                      {post.title}
                    </h3>
                    <p className="text-gray-300 mb-4 text-sm leading-relaxed line-clamp-3 font-mono">{post.excerpt}</p>
                    <div className="flex items-center justify-between text-xs text-gray-400 mb-3">
                      <span className="flex items-center gap-1 font-mono">
                        <FaCalendar className="text-cyan-400" />
                        {formatDate(post.publishDate)}
                      </span>
                      <span className="flex items-center gap-1 font-mono">
                        <FaClock className="text-cyan-400" />
                        {post.readTime}
                      </span>
                    </div>
                    <motion.button 
                      onClick={() => setSelectedPost(post)}
                      className="flex items-center gap-2 bg-gradient-to-r from-cyan-500 to-blue-500 text-white px-4 py-2 rounded-lg font-semibold hover:from-cyan-600 hover:to-blue-600 transition-all duration-300 shadow-lg shadow-cyan-500/30 font-mono text-sm"
                      whileHover={{ scale: 1.05, y: -2 }}
                      whileTap={{ scale: 0.95 }}
                    >
                      Read More
                      <FaArrowRight className="group-hover:translate-x-1 transition-transform" />
                    </motion.button>
                  </div>
                </motion.article>
              ))}
            </div>

            {filteredPosts.length === 0 && (
              <div className="text-center py-12">
                <p className="text-gray-400 text-lg font-mono">No articles found matching your criteria.</p>
              </div>
            )}
          </div>
        </motion.div>
      </div>
    </section>
    </>
  );
};

export default Blog;
